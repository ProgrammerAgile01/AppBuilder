"use client";

import {
  Car, Calendar, FileText, ArrowRightLeft, RotateCcw, CreditCard, Settings, Users,
  BarChart3, Wrench, History, UserCheck, Wallet, Fuel, TrendingUp, DollarSign, PieChart,
  Activity, Shield, MessageSquare, Bell, Receipt, Database, LogIn, Gift, Share2, BookOpen,
  HelpCircle, Video, MessageCircle, Home, ChevronRight, ArrowLeft, ChevronDown, Package,
  Palette, Zap, Building, BadgeIcon as IdCard, Star, UserCog, Lock, UserPlus, Truck, Info,
} from "lucide-react";

import { Sidebar, SidebarContent, SidebarHeader, useSidebar } from "@/components/ui/sidebar";
import { useLanguage } from "@/lib/contexts/language-context";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { useState, useEffect, useMemo } from "react";
import { useRouter, usePathname } from "next/navigation";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";

// Mobile nav
import { MobileTabBar } from "@/components/navigation/mobile-tab-bar";
import { MobileMenuDrawer } from "@/components/navigation/mobile-menu-drawer";

/* ===== Header kecil untuk Group ===== */
function GroupHeader({ name, color }: { name: string; color?: string }) {
  return (
    <div className="px-4 pt-4 pb-2">
      <div className="flex items-center gap-2 text-xs font-semibold text-muted-foreground">
        <span className="inline-block h-2 w-2 rounded-full" style={{ backgroundColor: color || "#94a3b8" }} />
        <span className="uppercase tracking-wider">{name}</span>
      </div>
    </div>
  );
}

/* ====== Sumber data menu (JANGAN DIUBAH) â€“ generator isi di sini ====== */
const menuItems: any =
/*__MENU_ITEMS__*/
/*======================================================================*/

/** ðŸ‘‰ Export agar dipakai juga oleh drawer mobile */
export const appSidebarMenuItems = menuItems;

/* ====== Sidebar Bersama (desktop) ====== */
function SharedSidebar() {
  const { t, language } = useLanguage();
  const router = useRouter();                 // <-- SATU-SATUNYA deklarasi router
  const pathname = usePathname();
  const { isMobile, state } = useSidebar();

  const [selectedGroup, setSelectedGroup] = useState<string | null>(null);
  const [selectedModule, setSelectedModule] = useState<string | null>(null);
  const [expandedNestedItems, setExpandedNestedItems] = useState<string[]>([]);

  // Kelompokkan modul by group
  const groups = useMemo(() => {
    const map: Record<string, { id: string; name: string; color?: string; modules: any[] }> = {};
    for (const m of menuItems as any[]) {
      const key = m.groupId ?? m.groupName ?? "0";
      if (!map[key]) {
        map[key] = { id: String(key), name: m.groupName || "Kelompok", color: m.groupColor, modules: [] };
      }
      map[key].modules.push(m);
    }
    Object.values(map).forEach((g) => g.modules.sort((a, b) => (a.count ?? 0) - (b.count ?? 0)));
    return Object.values(map);
  }, []);

  // Auto-select berdasarkan path
  useEffect(() => {
    const found = (() => {
      for (const g of groups) {
        for (const mod of g.modules) {
          if (mod.items?.some((it: any) => pathname.startsWith(it.href))) return { gid: g.id, mid: mod.id };
          if (mod.nestedItems?.some((ni: any) => ni.items?.some((sit: any) => pathname.startsWith(sit.href))))
            return { gid: g.id, mid: mod.id };
        }
      }
      return null;
    })();
    if (found) { setSelectedGroup(found.gid); setSelectedModule(found.mid); }
  }, [pathname, groups]);

  const handleNavigation = (href: string) => {
    router.push(href);
    if (isMobile) (document.querySelector('[data-sidebar="trigger"]') as HTMLButtonElement | null)?.click();
  };
  const isActive = (href: string) => (href === "/" ? pathname === "/" : pathname.startsWith(href));
  const toggleNestedItem = (id: string) =>
    setExpandedNestedItems((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));

  // === Level 3: Submenu ===
  if (selectedModule) {
    const group = groups.find((g) => g.id === selectedGroup);
    const module = group?.modules.find((m) => m.id === selectedModule);
    if (!module) return null;

    const hasNested = Array.isArray(module.nestedItems) && module.nestedItems.length > 0;

    return (
      <div className="flex flex-col h-full bg-background text-foreground">
        <SidebarHeader className="border-b border-border/50 p-4 bg-gradient-to-r from-muted/30 to-muted/10 flex-shrink-0">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => setSelectedModule(null)} className="p-2 hover:bg-muted/60 rounded-lg">
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div className={`p-2.5 rounded-xl ${module.iconBg} shadow-sm`}>
              <module.icon className={`h-5 w-5 ${module.iconColor}`} />
            </div>
            {(!isMobile || state === "expanded") && (
              <div>
                <h3 className="font-semibold text-sm">{module.label ?? module.labelKey ?? "Modul"}</h3>
                <p className="text-xs text-muted-foreground">{language === "id" ? module.descriptionId : module.description}</p>
              </div>
            )}
          </div>
        </SidebarHeader>

        <SidebarContent className="p-4 flex-1 overflow-y-auto sidebar-scrollbar">
          {!hasNested ? (
            <div className="space-y-2">
              {module.items?.map((item: any) => (
                <Button
                  key={item.href}
                  variant="ghost"
                  className={`w-full justify-start gap-3 h-12 rounded-xl ${
                    isActive(item.href) ? "bg-primary/10 text-primary border border-primary/20" : "hover:bg-muted/60"
                  }`}
                  onClick={() => handleNavigation(item.href)}
                >
                  <item.icon className={`h-4 w-4 ${isActive(item.href) ? "text-primary" : ""}`} />
                  {(!isMobile || state === "expanded") && (
                    <>
                      <span className="text-sm font-medium">{item.label ?? item.labelKey}</span>
                      {isActive(item.href) && <div className="ml-auto w-2 h-2 bg-primary rounded-full" />}
                    </>
                  )}
                </Button>
              ))}
            </div>
          ) : (
            <div className="space-y-2">
              {module.nestedItems.map((nestedItem: any) => (
                <Collapsible key={nestedItem.id} open={expandedNestedItems.includes(nestedItem.id)} onOpenChange={() => toggleNestedItem(nestedItem.id)}>
                  <CollapsibleTrigger asChild>
                    <Button variant="ghost" className="w-full justify-start gap-3 h-12 rounded-xl">
                      <nestedItem.icon className="h-4 w-4" />
                      {(!isMobile || state === "expanded") && (
                        <>
                          <span className="text-sm font-medium flex-1 text-left">{nestedItem.label}</span>
                          <ChevronDown className={`h-4 w-4 transition-transform ${expandedNestedItems.includes(nestedItem.id) ? "rotate-180" : ""}`} />
                        </>
                      )}
                    </Button>
                  </CollapsibleTrigger>
                  <CollapsibleContent className="space-y-1 mt-1">
                    {nestedItem.items.map((subItem: any) => (
                      <Button
                        key={subItem.href}
                        variant="ghost"
                        className={`w-full justify-start gap-3 h-10 rounded-lg ml-6 ${
                          isActive(subItem.href) ? "bg-primary/10 text-primary border border-primary/20" : "text-muted-foreground hover:bg-muted/40"
                        }`}
                        onClick={() => handleNavigation(subItem.href)}
                      >
                        <subItem.icon className={`h-3.5 w-3.5 ${isActive(subItem.href) ? "text-primary" : ""}`} />
                        {(!isMobile || state === "expanded") && (
                          <>
                            <span className="text-xs font-medium">{subItem.label ?? subItem.labelKey}</span>
                            {isActive(subItem.href) && <div className="ml-auto w-1.5 h-1.5 bg-primary rounded-full" />}
                          </>
                        )}
                      </Button>
                    ))}
                  </CollapsibleContent>
                </Collapsible>
              ))}
            </div>
          )}
        </SidebarContent>
      </div>
    );
  }

  // === Level 2: Daftar Modul per Group ===
  if (selectedGroup) {
    const group = groups.find((g) => g.id === selectedGroup);
    if (!group) return null;

    const hasActiveInModule = (module: any) =>
      module.items?.some((it: any) => isActive(it.href)) ||
      module.nestedItems?.some((ni: any) => ni.items?.some((sit: any) => isActive(sit.href)));

    return (
      <div className="flex flex-col h-full bg-background text-foreground">
        <SidebarHeader className="border-b border-border/50 p-4 bg-gradient-to-r from-muted/30 to-muted/10 flex-shrink-0">
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => { setSelectedGroup(null); setSelectedModule(null); }}
              className="p-2 hover:bg-muted/60 rounded-lg"
            >
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div className="p-2.5 rounded-xl bg-muted/40 shadow-sm">
              <Building className="h-5 w-5 text-muted-foreground" />
            </div>
            {(!isMobile || state === "expanded") && (
              <div>
                <h3 className="font-semibold text-sm">{group.name}</h3>
                <p className="text-xs text-muted-foreground">Pilih modul</p>
              </div>
            )}
          </div>
        </SidebarHeader>

        <SidebarContent className="p-4 flex-1 overflow-y-auto sidebar-scrollbar">
          <div className="space-y-3">
            {group.modules.map((module: any) => {
              const active = hasActiveInModule(module);
              return (
                <Card
                  key={module.id}
                  className={`cursor-pointer transition-all group rounded-xl shadow-sm hover:shadow-md bg-card border-border ${
                    active ? `${module.activeBorder} bg-gradient-to-br from-muted/30 to-muted/10`
                           : `${module.borderColor} hover:bg-gradient-to-br hover:from-muted/20 hover:to-muted/5`
                  }`}
                  onClick={() => setSelectedModule(module.id)}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className={`p-2.5 rounded-xl ${module.iconBg} shadow-sm`}>
                        <module.icon className={`h-5 w-5 ${module.iconColor}`} />
                      </div>
                      {(!isMobile || state === "expanded") && (
                        <>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h3 className="font-semibold text-sm truncate">{module.label ?? module.labelKey}</h3>
                              <Badge variant="secondary" className="text-xs px-2 py-0.5 bg-muted/60 border-0 font-medium">
                                {module.count}
                              </Badge>
                              {active && <div className="w-2 h-2 bg-primary rounded-full" />}
                            </div>
                            <p className="text-xs text-muted-foreground truncate">
                              {language === "id" ? module.descriptionId : module.description}
                            </p>
                            <p className="text-xs text-muted-foreground/80 mt-1">
                              {(module.items?.length ?? module.nestedItems?.length ?? 0)} menu
                            </p>
                          </div>
                          <ChevronRight className={`h-4 w-4 ${active ? "text-primary" : "text-muted-foreground"}`} />
                        </>
                      )}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </SidebarContent>
      </div>
    );
  }

  // === Level 1: Daftar Group ===
  return (
    <div className="flex flex-col h-full bg-background text-foreground">
      <SidebarHeader className="border-b border-border/50 p-4 bg-gradient-to-r from-muted/30 to-muted/10 flex-shrink-0">
        <div className="flex items-center gap-3">
          <div className="flex h-10 w-10 items-center justify-center rounded-xl overflow-hidden bg-gradient-to-br from-primary via-primary/90 to-secondary shadow-lg ring-2 ring-primary/20">
            <img src="/rentvix-logo.png" alt="RentVix" className="h-7 w-7 object-contain" />
          </div>
          {(!isMobile || state === "expanded") && (
            <div>
              <h2 className="text-base font-bold tracking-tight">RentVix</h2>
              <p className="text-xs text-muted-foreground">Pro Dashboard</p>
            </div>
          )}
        </div>
      </SidebarHeader>

      <SidebarContent className="flex-1 overflow-y-auto sidebar-scrollbar">
        <div className="p-4">
          {/* Dashboard Card */}
          <Card
            className={`mb-6 cursor-pointer transition-all rounded-xl shadow-sm bg-card border-border ${
              pathname === "/"
                ? "border-primary/40 bg-gradient-to-br from-primary/5 to-primary/10"
                : "hover:border-primary/30 hover:bg-gradient-to-br hover:from-primary/5 hover:to-primary/10"
            }`}
            onClick={() => router.push("/")}
          >
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className="p-2.5 rounded-xl bg-gradient-to-br from-primary/20 to-primary/30 shadow-sm">
                  <Home className="h-5 w-5 text-primary" />
                </div>
                {(!isMobile || state === "expanded") && (
                  <>
                    <div className="flex-1">
                      <h3 className="font-semibold text-sm">Dashboard</h3>
                      <p className="text-xs text-muted-foreground">Ringkasan dan statistik</p>
                    </div>
                    <ChevronRight className="h-4 w-4 text-muted-foreground" />
                  </>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Group Cards */}
          <div className="space-y-3">
            {groups.map((g) => {
              const totalFeatures = g.modules.reduce((acc, m) => acc + (m.items?.length ?? m.nestedItems?.length ?? 0), 0);
              return (
                <Card
                  key={g.id}
                  className="cursor-pointer transition-all group rounded-xl shadow-sm bg-card border-border hover:border-primary/30 hover:bg-gradient-to-br hover:from-muted/20 hover:to-muted/5"
                  onClick={() => setSelectedGroup(g.id)}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="p-2.5 rounded-xl shadow-sm" style={{ backgroundColor: (g.color || "#e5e7eb") + "33" }}>
                        <Building className="h-5 w-5" style={{ color: g.color || "#64748b" }} />
                      </div>
                      {(!isMobile || state === "expanded") && (
                        <>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h3 className="font-semibold text-sm truncate">{g.name}</h3>
                              <Badge variant="secondary" className="text-xs px-2 py-0.5 bg-muted/60 border-0 font-medium">
                                {g.modules.length}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground truncate">Kelompok modul</p>
                            <p className="text-xs text-muted-foreground/80 mt-1">{totalFeatures} menu</p>
                          </div>
                          <ChevronRight className="h-4 w-4 text-muted-foreground" />
                        </>
                      )}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      </SidebarContent>
    </div>
  );
}

export function AppSidebar() {
  return (
    <Sidebar variant="inset" className="border-r border-border/50 bg-background">
      <div className="flex flex-col h-full">
        <div className="flex-1 overflow-hidden sidebar-scrollbar">
          <SharedSidebar />
        </div>
      </div>
    </Sidebar>
  );
}

/** ðŸ”¥ Wrapper responsif â€” otomatis sidebar di desktop & bottom menu di mobile */
export function AppNavigationResponsive({ children }: { children: React.ReactNode }) {
  const [open, setOpen] = useState(false);
  return (
    <div className="min-h-dvh w-full flex">
      {/* Desktop: Sidebar */}
      <div className="hidden lg:block">
        <AppSidebar />
      </div>

      {/* Konten */}
      <div className="flex-1 min-w-0 pb-24 lg:pb-0">
        {children}
      </div>

      {/* Mobile: Bottom Tab + Drawer */}
      <MobileTabBar onOpenMenu={() => setOpen(true)} />
      <MobileMenuDrawer items={appSidebarMenuItems as any[]} open={open} setOpen={setOpen} />
    </div>
  );
}
